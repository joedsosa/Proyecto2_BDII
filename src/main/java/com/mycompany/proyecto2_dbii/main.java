package com.mycompany.proyecto2_dbii;

import java.sql.Connection;
import java.sql.DatabaseMetaData;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.time.LocalDateTime;
import java.util.ArrayList;
import java.util.Collections;
import java.util.List;
import javax.swing.DefaultListModel;
import javax.swing.JList;
import javax.swing.JOptionPane;
import javax.swing.ListModel;

/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
/**
 *
 * @author Julian Benda√±a
 */
public class main extends javax.swing.JFrame {

    private String instanceSQlOrigen;
    private String portOrigen;
    private String databaseOrigen;
    private String userOrigen;
    private String passOrigen;
    private String instanceSQlDestino;
    private String portDestino;
    private String databaseDestino;
    private String userDestino;
    private String passDestino;

    /**
     * Creates new form main
     */
    public main() {
        initComponents();
        this.setLocationRelativeTo(null);
        CB_NombreInstancia.setSelectedIndex(0);
        JT_NombreBD.setText("proyecto");
        JT_Puerto.setText("1433");
        JT_NombreUser.setText("admin");
        JT_Password.setText("admin123");

        CB_NombreInstancia1.setSelectedIndex(1);
        JT_NombreBD1.setText("proyecto");
        JT_Puerto1.setText("5432");
        JT_NombreUser1.setText("admin123");
        JT_Password1.setText("admin123");

        jListSinReplicar.setModel(new DefaultListModel<String>());
        jListReplicando.setModel(new DefaultListModel<String>());

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jFrame1 = new javax.swing.JFrame();
        jLabel14 = new javax.swing.JLabel();
        jLabel15 = new javax.swing.JLabel();
        jLabel16 = new javax.swing.JLabel();
        btnAgregar = new javax.swing.JButton();
        btnRemover = new javax.swing.JButton();
        btnGuardar = new javax.swing.JButton();
        btnCancelar = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        jListReplicando = new javax.swing.JList<>();
        jScrollPane2 = new javax.swing.JScrollPane();
        jListSinReplicar = new javax.swing.JList<>();
        jLabel17 = new javax.swing.JLabel();
        jLabel18 = new javax.swing.JLabel();
        JB_Probar = new javax.swing.JButton();
        JT_Password = new javax.swing.JTextField();
        jLabel7 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        JT_NombreUser = new javax.swing.JTextField();
        JT_Puerto = new javax.swing.JTextField();
        jLabel6 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        JT_NombreBD = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        JT_NombreBD1 = new javax.swing.JTextField();
        JT_Puerto1 = new javax.swing.JTextField();
        JT_NombreUser1 = new javax.swing.JTextField();
        JT_Password1 = new javax.swing.JTextField();
        JB_Probar1 = new javax.swing.JButton();
        JB_Guardar = new javax.swing.JButton();
        jLabel13 = new javax.swing.JLabel();
        jLabel12 = new javax.swing.JLabel();
        jLabel11 = new javax.swing.JLabel();
        jLabel10 = new javax.swing.JLabel();
        CB_NombreInstancia = new javax.swing.JComboBox<>();
        CB_NombreInstancia1 = new javax.swing.JComboBox<>();

        jFrame1.setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        jFrame1.addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosed(java.awt.event.WindowEvent evt) {
                jFrame1WindowClosed(evt);
            }
        });

        jLabel14.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        jLabel14.setText("Tablas BD Origen");

        jLabel15.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        jLabel15.setText("Sin Replicar");

        jLabel16.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        jLabel16.setText("Replicando");

        btnAgregar.setText(">>");
        btnAgregar.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                btnAgregarMouseClicked(evt);
            }
        });
        btnAgregar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAgregarActionPerformed(evt);
            }
        });

        btnRemover.setText("<<");
        btnRemover.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                btnRemoverMouseClicked(evt);
            }
        });

        btnGuardar.setText("Guardar");
        btnGuardar.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                btnGuardarMouseClicked(evt);
            }
        });

        btnCancelar.setText("Cancelar");
        btnCancelar.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                btnCancelarMouseClicked(evt);
            }
        });

        jListReplicando.setModel(new javax.swing.AbstractListModel<String>() {
            String[] strings = { "Item 1", "Item 2", "Item 3", "Item 4", "Item 5" };
            public int getSize() { return strings.length; }
            public String getElementAt(int i) { return strings[i]; }
        });
        jScrollPane1.setViewportView(jListReplicando);

        jListSinReplicar.setModel(new javax.swing.AbstractListModel<String>() {
            String[] strings = { "Item 1", "Item 2", "Item 3", "Item 4", "Item 5" };
            public int getSize() { return strings.length; }
            public String getElementAt(int i) { return strings[i]; }
        });
        jScrollPane2.setViewportView(jListSinReplicar);

        jLabel17.setText("Ultima vez que se utilizo:");

        javax.swing.GroupLayout jFrame1Layout = new javax.swing.GroupLayout(jFrame1.getContentPane());
        jFrame1.getContentPane().setLayout(jFrame1Layout);
        jFrame1Layout.setHorizontalGroup(
            jFrame1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jFrame1Layout.createSequentialGroup()
                .addGroup(jFrame1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jFrame1Layout.createSequentialGroup()
                        .addGap(49, 49, 49)
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 201, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGroup(jFrame1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jFrame1Layout.createSequentialGroup()
                                .addGap(80, 80, 80)
                                .addComponent(btnAgregar, javax.swing.GroupLayout.PREFERRED_SIZE, 161, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(jFrame1Layout.createSequentialGroup()
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(btnRemover, javax.swing.GroupLayout.PREFERRED_SIZE, 161, javax.swing.GroupLayout.PREFERRED_SIZE))))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jFrame1Layout.createSequentialGroup()
                        .addGap(250, 250, 250)
                        .addComponent(jLabel14)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 91, Short.MAX_VALUE)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(102, 102, 102))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jFrame1Layout.createSequentialGroup()
                .addGap(85, 85, 85)
                .addComponent(jLabel15)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabel16)
                .addGap(150, 150, 150))
            .addGroup(jFrame1Layout.createSequentialGroup()
                .addGap(214, 214, 214)
                .addGroup(jFrame1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel17)
                    .addGroup(jFrame1Layout.createSequentialGroup()
                        .addGroup(jFrame1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(jLabel18, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(btnGuardar, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 161, Short.MAX_VALUE))
                        .addGap(74, 74, 74)
                        .addComponent(btnCancelar, javax.swing.GroupLayout.PREFERRED_SIZE, 161, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jFrame1Layout.setVerticalGroup(
            jFrame1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jFrame1Layout.createSequentialGroup()
                .addGap(61, 61, 61)
                .addComponent(jLabel14)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jFrame1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel16)
                    .addComponent(jLabel15))
                .addGap(18, 18, 18)
                .addGroup(jFrame1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jFrame1Layout.createSequentialGroup()
                        .addGap(24, 24, 24)
                        .addComponent(btnAgregar, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(btnRemover, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 170, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 188, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(jLabel17)
                .addGroup(jFrame1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jFrame1Layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(btnCancelar, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jFrame1Layout.createSequentialGroup()
                        .addGap(2, 2, 2)
                        .addComponent(jLabel18, javax.swing.GroupLayout.PREFERRED_SIZE, 15, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnGuardar, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 11, Short.MAX_VALUE)))
                .addGap(199, 199, 199))
        );

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        JB_Probar.setText("Probar");
        JB_Probar.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                JB_ProbarMouseClicked(evt);
            }
        });

        jLabel7.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        jLabel7.setText("Password");

        jLabel5.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        jLabel5.setText("Nombre usuario");

        jLabel6.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        jLabel6.setText("Puerto");

        jLabel4.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        jLabel4.setText("Nombre Base Datos");

        jLabel3.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        jLabel3.setText("Nombre Instancia");

        jLabel2.setFont(new java.awt.Font("Segoe UI", 1, 24)); // NOI18N
        jLabel2.setText("Base de Datos Origen");

        jLabel1.setFont(new java.awt.Font("Segoe UI", 1, 24)); // NOI18N
        jLabel1.setText("Configuracion de Base de Datos");

        jLabel8.setFont(new java.awt.Font("Segoe UI", 1, 24)); // NOI18N
        jLabel8.setText("Base de Datos Destino");

        jLabel9.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        jLabel9.setText("Nombre Instancia");

        JB_Probar1.setText("Probar");
        JB_Probar1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                JB_Probar1MouseClicked(evt);
            }
        });

        JB_Guardar.setText("Guardar");
        JB_Guardar.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                JB_GuardarMouseClicked(evt);
            }
        });

        jLabel13.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        jLabel13.setText("Password");

        jLabel12.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        jLabel12.setText("Nombre usuario");

        jLabel11.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        jLabel11.setText("Puerto");

        jLabel10.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        jLabel10.setText("Nombre Base Datos");

        CB_NombreInstancia.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "sqlserverdb.c3rphpy5bbiu.us-east-1.rds.amazonaws.com", "dbpostgre.c3rphpy5bbiu.us-east-1.rds.amazonaws.com" }));
        CB_NombreInstancia.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                CB_NombreInstanciaItemStateChanged(evt);
            }
        });

        CB_NombreInstancia1.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "sqlserverdb.c3rphpy5bbiu.us-east-1.rds.amazonaws.com", "dbpostgre.c3rphpy5bbiu.us-east-1.rds.amazonaws.com" }));
        CB_NombreInstancia1.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                CB_NombreInstancia1ItemStateChanged(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(256, 256, 256)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel8)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                    .addComponent(jLabel9)
                                    .addGap(18, 18, 18)
                                    .addComponent(CB_NombreInstancia1, javax.swing.GroupLayout.PREFERRED_SIZE, 239, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                    .addComponent(jLabel10)
                                    .addGap(4, 4, 4)
                                    .addComponent(JT_NombreBD1, javax.swing.GroupLayout.PREFERRED_SIZE, 239, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                    .addComponent(jLabel11)
                                    .addGap(85, 85, 85)
                                    .addComponent(JT_Puerto1, javax.swing.GroupLayout.PREFERRED_SIZE, 239, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                    .addComponent(jLabel12)
                                    .addGap(27, 27, 27)
                                    .addComponent(JT_NombreUser1, javax.swing.GroupLayout.PREFERRED_SIZE, 239, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGroup(layout.createSequentialGroup()
                                    .addComponent(jLabel13)
                                    .addGap(68, 68, 68)
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addComponent(JB_Probar1, javax.swing.GroupLayout.PREFERRED_SIZE, 139, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(JT_Password1, javax.swing.GroupLayout.PREFERRED_SIZE, 239, javax.swing.GroupLayout.PREFERRED_SIZE))))
                            .addComponent(jLabel2)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel5)
                                .addGap(27, 27, 27)
                                .addComponent(JT_NombreUser, javax.swing.GroupLayout.PREFERRED_SIZE, 239, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                                    .addComponent(jLabel3)
                                    .addGap(18, 18, 18)
                                    .addComponent(CB_NombreInstancia, 0, 326, Short.MAX_VALUE))
                                .addComponent(jLabel1)
                                .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addComponent(jLabel4)
                                        .addComponent(jLabel6))
                                    .addGap(4, 4, 4)
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addComponent(JT_NombreBD)
                                        .addComponent(JT_Puerto)))))
                        .addContainerGap())
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel7)
                        .addGap(68, 68, 68)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(JT_Password, javax.swing.GroupLayout.PREFERRED_SIZE, 239, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(45, 282, Short.MAX_VALUE))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(JB_Probar, javax.swing.GroupLayout.PREFERRED_SIZE, 139, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(JB_Guardar, javax.swing.GroupLayout.PREFERRED_SIZE, 231, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(43, 43, 43))))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(19, 19, 19)
                .addComponent(jLabel1)
                .addGap(18, 18, 18)
                .addComponent(jLabel2)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel3)
                    .addComponent(CB_NombreInstancia, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4)
                    .addComponent(JT_NombreBD, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel6)
                    .addComponent(JT_Puerto, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel5)
                    .addComponent(JT_NombreUser, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel7)
                    .addComponent(JT_Password, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(JB_Probar, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jLabel8))
                    .addComponent(JB_Guardar, javax.swing.GroupLayout.PREFERRED_SIZE, 71, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel9)
                    .addComponent(CB_NombreInstancia1, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel10)
                    .addComponent(JT_NombreBD1, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel11)
                    .addComponent(JT_Puerto1, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel12)
                    .addComponent(JT_NombreUser1, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel13)
                    .addComponent(JT_Password1, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(JB_Probar1, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(95, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void JB_GuardarMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_JB_GuardarMouseClicked
        if (CB_NombreInstancia.getSelectedIndex() == 0 && CB_NombreInstancia1.getSelectedIndex() == 0
                || CB_NombreInstancia.getSelectedIndex() == 1 && CB_NombreInstancia1.getSelectedIndex() == 1) {
            JOptionPane.showMessageDialog(this, "Utilice diferentes motores");
        } else {
            jFrame1.pack();
            jFrame1.setLocationRelativeTo(this);
            jFrame1.setVisible(true);
            this.setVisible(false);

            if (CB_NombreInstancia.getSelectedIndex() == 0) {
                sqlServer = true;
                instanceSQlOrigen = "sqlserverdb.c3rphpy5bbiu.us-east-1.rds.amazonaws.com";
                instanceSQlDestino = "dbpostgre.c3rphpy5bbiu.us-east-1.rds.amazonaws.com";
            } else {
                sqlServer = false;
                instanceSQlDestino = "sqlserverdb.c3rphpy5bbiu.us-east-1.rds.amazonaws.com";
                instanceSQlOrigen = "dbpostgre.c3rphpy5bbiu.us-east-1.rds.amazonaws.com";
            }
            databaseOrigen = JT_NombreBD.getText();
            portOrigen = JT_Puerto.getText();
            userOrigen = JT_NombreUser.getText();
            passOrigen = JT_Password.getText();

            databaseDestino = JT_NombreBD1.getText();
            portDestino = JT_Puerto1.getText();
            userDestino = JT_NombreUser1.getText();
            passDestino = JT_Password1.getText();

            cargarTablasOrigen();
        }


    }//GEN-LAST:event_JB_GuardarMouseClicked

    private void JB_ProbarMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_JB_ProbarMouseClicked
        // TODO add your handling code here:
        String instance;
        if (CB_NombreInstancia.getSelectedIndex() == 0) {
            instance = "sqlserverdb.c3rphpy5bbiu.us-east-1.rds.amazonaws.com";
        } else {
            instance = "dbpostgre.c3rphpy5bbiu.us-east-1.rds.amazonaws.com";
        }

        String database = JT_NombreBD.getText();
        String port = JT_Puerto.getText();
        String user = JT_NombreUser.getText();
        String password = JT_Password.getText();

        try {
            if (CB_NombreInstancia.getSelectedIndex() == 0) {
                Connection conn = DatabaseConnection.getSQLServerConnection(instance, database, port, user, password);
                JOptionPane.showMessageDialog(null, "Conexi√≥n exitosa a la base de datos origen");
                conn.close();
            } else {
                Connection conn = DatabaseConnection.connectToPostgreSQL(instance, database, port, user, password);
                JOptionPane.showMessageDialog(null, "Conexi√≥n exitosa a la base de datos origen");
                conn.close();
            }
        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(null, "Error de conexi√≥n: " + ex.getMessage());
        }

    }//GEN-LAST:event_JB_ProbarMouseClicked

    private void JB_Probar1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_JB_Probar1MouseClicked
        String instance;
        if (CB_NombreInstancia1.getSelectedIndex() == 0) {
            instance = "sqlserverdb.c3rphpy5bbiu.us-east-1.rds.amazonaws.com";
        } else {
            instance = "dbpostgre.c3rphpy5bbiu.us-east-1.rds.amazonaws.com";
        }

        String database = JT_NombreBD1.getText();
        String port = JT_Puerto1.getText();
        String user = JT_NombreUser1.getText();
        String password = JT_Password1.getText();

        try {
            if (CB_NombreInstancia1.getSelectedIndex() == 0) {
                Connection conn = DatabaseConnection.getSQLServerConnection(instance, database, port, user, password);
                JOptionPane.showMessageDialog(null, "Conexi√≥n exitosa a la base de datos destino");
                conn.close();
            } else {
                Connection conn = DatabaseConnection.connectToPostgreSQL(instance, database, port, user, password);
                JOptionPane.showMessageDialog(null, "Conexi√≥n exitosa a la base de datos destino");
                conn.close();
            }
        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(null, "Error de conexi√≥n: " + ex.getMessage());
        }
    }//GEN-LAST:event_JB_Probar1MouseClicked

    private void btnAgregarMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnAgregarMouseClicked
        List<String> selectedValues = jListSinReplicar.getSelectedValuesList();
        // Verifica si los modelos son instancias de DefaultListModel
        if (jListSinReplicar.getModel() instanceof DefaultListModel && jListReplicando.getModel() instanceof DefaultListModel) {
            DefaultListModel<String> modelSinReplicar = (DefaultListModel<String>) jListSinReplicar.getModel();
            DefaultListModel<String> modelReplicando = (DefaultListModel<String>) jListReplicando.getModel();

            for (String value : selectedValues) {
                modelReplicando.addElement(value);
                modelSinReplicar.removeElement(value);
            }
        } else {
            // Manejo del error si el modelo no es del tipo esperado
            JOptionPane.showMessageDialog(this, "Error: El modelo de las listas no es del tipo DefaultListModel");
        }
    }//GEN-LAST:event_btnAgregarMouseClicked

    private void btnRemoverMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnRemoverMouseClicked
        List<String> selectedValues = jListReplicando.getSelectedValuesList();
        DefaultListModel<String> modelSinReplicar = (DefaultListModel<String>) jListSinReplicar.getModel();
        DefaultListModel<String> modelReplicando = (DefaultListModel<String>) jListReplicando.getModel();

        for (String value : selectedValues) {
            modelSinReplicar.addElement(value);
            modelReplicando.removeElement(value);

        }

    }//GEN-LAST:event_btnRemoverMouseClicked
    private void btnGuardarMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnGuardarMouseClicked

        DefaultListModel<String> modelReplicando = (DefaultListModel<String>) jListReplicando.getModel();
        List<String> tablasAReplicar = Collections.list(modelReplicando.elements());

        String insta1, db1, port1, us1, pw1, insta, db, port, us, pw;
        if (sqlServer) {
            insta1 = instanceSQlOrigen;
            db1 = databaseOrigen;
            port1 = portOrigen;
            us1 = userOrigen;
            pw1 = passOrigen;
            insta = instanceSQlDestino;
            db = databaseDestino;
            port = portDestino;
            us = userDestino;
            pw = passDestino;
        } else {
            insta = instanceSQlOrigen;
            db = databaseOrigen;
            port = portOrigen;
            us = userOrigen;
            pw = passOrigen;
            insta1 = instanceSQlDestino;
            db1 = databaseDestino;
            port1 = portDestino;
            us1 = userDestino;
            pw1 = passDestino;
        }

        try (Connection connSQL = DatabaseConnection.getSQLServerConnection(insta1, db1, port1, us1, pw1); Connection connPostgre = DatabaseConnection.connectToPostgreSQL(insta, db, port, us, pw)) {
            if (sqlServer) {
                for (String tabla : tablasAReplicar) {
                    if (tableExistsSQLaPG(connPostgre, tabla) == true){
                        dropTableSQLaPG(connPostgre, tabla);
                    }
                    replicarTablaEstructura(connSQL, connPostgre, tabla);
                    replicarTablaInicial(connSQL, connPostgre, tabla);
                }
                ejecutarJobReplicacionSQLSaPG();
            } else {
                for (String tabla : tablasAReplicar) {
                    if (tableExistsPGaSQL(connSQL, tabla)== true){
                        dropTablePGaSQL(connSQL, tabla);
                    }
                    replicarTablaEstructuraPGaSQLS(connPostgre, connSQL, tabla);
                    replicarTablaInicialPGaSQLS(connPostgre, connSQL, tabla);
                }

                ejecutarJobReplicacionPGaSQLS();
            }
            lastDate = "" + LocalDateTime.now();
            jLabel18.setText(lastDate);

            JOptionPane.showMessageDialog(null, "Migraci√≥n completada con √©xito");
            // Iniciar replicaci√≥n continua

        } catch (SQLException e) {
            e.printStackTrace();
            JOptionPane.showMessageDialog(null, "Error durante la migraci√≥n: " + e.getMessage());
        }
        // Guardar la lista de tablas a replicar en alg√∫n lugar (e.g., base de datos, archivo de configuraci√≥n)
        // Implementar aqu√≠ la l√≥gica para guardar las tablas seleccionadas

    }//GEN-LAST:event_btnGuardarMouseClicked

    private void btnAgregarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAgregarActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_btnAgregarActionPerformed

    private void btnCancelarMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnCancelarMouseClicked
        this.pack();
        this.setLocationRelativeTo(this);
        this.setVisible(true);
        jFrame1.setVisible(false);
    }//GEN-LAST:event_btnCancelarMouseClicked

    private void CB_NombreInstanciaItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_CB_NombreInstanciaItemStateChanged
        if (CB_NombreInstancia.getSelectedIndex() == 0) {
            JT_NombreBD.setText("proyecto");
            JT_Puerto.setText("1433");
            JT_NombreUser.setText("admin");
            JT_Password.setText("admin123");
        } else {
            JT_NombreBD.setText("proyecto");
            JT_Puerto.setText("5432");
            JT_NombreUser.setText("admin123");
            JT_Password.setText("admin123");
        }

    }//GEN-LAST:event_CB_NombreInstanciaItemStateChanged

    private void CB_NombreInstancia1ItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_CB_NombreInstancia1ItemStateChanged
        if (CB_NombreInstancia1.getSelectedIndex() == 0) {
            JT_NombreBD1.setText("proyecto");
            JT_Puerto1.setText("1433");
            JT_NombreUser1.setText("admin");
            JT_Password1.setText("admin123");
        } else {
            JT_NombreBD1.setText("proyecto");
            JT_Puerto1.setText("5432");
            JT_NombreUser1.setText("admin123");
            JT_Password1.setText("admin123");
        }
    }//GEN-LAST:event_CB_NombreInstancia1ItemStateChanged

    private void jFrame1WindowClosed(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_jFrame1WindowClosed

    }//GEN-LAST:event_jFrame1WindowClosed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;

                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(main.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);

        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(main.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);

        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(main.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);

        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(main.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new main().setVisible(true);
            }
        });
    }

    public static List<String> obtenerValoresDelModelo(JList<String> jList) {
        List<String> valores = new ArrayList<>();
        ListModel<String> modelo = jList.getModel();

        for (int i = 0; i < modelo.getSize(); i++) {
            valores.add(modelo.getElementAt(i));
        }

        return valores;
    }

    public void ejecutarJobReplicacionSQLSaPG() {
        try (Connection connSQL = DatabaseConnection.getSQLServerConnection(instanceSQlOrigen, databaseOrigen, portOrigen, userOrigen, passOrigen); Connection connPostgre = DatabaseConnection.connectToPostgreSQL(instanceSQlDestino, databaseDestino, portDestino, userDestino, passDestino)) {

            String query = "SELECT Operacion, Tabla, RegistroId FROM Bitacora WHERE Procesado = 0";
            Statement stmtSQL = connSQL.createStatement();
            ResultSet rs = stmtSQL.executeQuery(query);

            while (rs.next()) {
                String operacion = rs.getString("Operacion");
                String tabla = rs.getString("Tabla");
                int registroId = rs.getInt("RegistroId");

                if (operacion.equals("INSERT")) {
                    replicarInsertSQLSaPG(connSQL, connPostgre, tabla, registroId);
                } else if (operacion.equals("UPDATE")) {
                    replicarUpdateSQLSaPG(connSQL, connPostgre, tabla, registroId);
                } else if (operacion.equals("DELETE")) {
                    replicarDeleteSQLSaPG(connPostgre, tabla, registroId);
                }

                // Marca la operaci√≥n como procesada
                String update = "UPDATE Bitacora SET procesado = 1 WHERE operacion = ? AND tabla = ? AND registroid = ?";
                PreparedStatement pstmt = connSQL.prepareStatement(update);
                pstmt.setString(1, operacion);
                pstmt.setString(2, tabla);
                pstmt.setInt(3, registroId);
                pstmt.executeUpdate();
            }

        } catch (SQLException e) {
            e.printStackTrace();
        }
    }

    private void replicarInsertSQLSaPG(Connection connSQL, Connection connPostgre, String tabla, int registroId) throws SQLException {
        // Recupera el registro completo de SQL Server
        String querySQL = "SELECT * FROM " + tabla + " WHERE Id = ?";
        PreparedStatement pstmtSQL = connSQL.prepareStatement(querySQL);
        pstmtSQL.setInt(1, registroId);
        ResultSet rs = pstmtSQL.executeQuery();

        if (rs.next()) {
            // Crea una inserci√≥n en PostgreSQL con los datos recuperados
            StringBuilder fields = new StringBuilder();
            StringBuilder values = new StringBuilder();
            for (int i = 1; i <= rs.getMetaData().getColumnCount(); i++) {
                if (i > 1) {
                    fields.append(", ");
                    values.append(", ");
                }
                fields.append(rs.getMetaData().getColumnName(i));
                values.append("?");
            }

            String insertPostgre = "INSERT INTO " + tabla + " (" + fields.toString() + ") VALUES (" + values.toString() + ")";
            PreparedStatement pstmtPostgre = connPostgre.prepareStatement(insertPostgre);

            for (int i = 1; i <= rs.getMetaData().getColumnCount(); i++) {
                pstmtPostgre.setObject(i, rs.getObject(i));
            }
            pstmtPostgre.executeUpdate();
        }
    }

    private void replicarUpdateSQLSaPG(Connection connSQL, Connection connPostgre, String tabla, int registroId) throws SQLException {
        // Recupera el registro completo de SQL Server
        String querySQL = "SELECT * FROM " + tabla + " WHERE Id = ?";
        PreparedStatement pstmtSQL = connSQL.prepareStatement(querySQL);
        pstmtSQL.setInt(1, registroId);
        ResultSet rs = pstmtSQL.executeQuery();

        if (rs.next()) {
            // Crea una actualizaci√≥n en PostgreSQL con los datos recuperados
            StringBuilder setClause = new StringBuilder();
            for (int i = 1; i <= rs.getMetaData().getColumnCount(); i++) {
                if (i > 1) {
                    setClause.append(", ");
                }
                setClause.append(rs.getMetaData().getColumnName(i)).append(" = ?");
            }

            String updatePostgre = "UPDATE " + tabla + " SET " + setClause.toString() + " WHERE Id = ?";
            PreparedStatement pstmtPostgre = connPostgre.prepareStatement(updatePostgre);

            for (int i = 1; i <= rs.getMetaData().getColumnCount(); i++) {
                pstmtPostgre.setObject(i, rs.getObject(i));
            }
            pstmtPostgre.setInt(rs.getMetaData().getColumnCount() + 1, registroId);
            pstmtPostgre.executeUpdate();
        }
    }

    private void replicarDeleteSQLSaPG(Connection connPostgre, String tabla, int registroId) throws SQLException {
        // Elimina el registro en PostgreSQL
        String deletePostgre = "DELETE FROM " + tabla + " WHERE Id = ?";
        PreparedStatement pstmtPostgre = connPostgre.prepareStatement(deletePostgre);
        pstmtPostgre.setInt(1, registroId);
        pstmtPostgre.executeUpdate();
    }

    public void ejecutarJobReplicacionPGaSQLS() {
        try (Connection connPostgre = DatabaseConnection.connectToPostgreSQL(instanceSQlOrigen, databaseOrigen, portOrigen, userOrigen, passOrigen); Connection connSQL = DatabaseConnection.getSQLServerConnection(instanceSQlDestino, databaseDestino, portDestino, userDestino, passDestino)) {

            String query = "SELECT Operacion, Tabla, RegistroId FROM Bitacora WHERE Procesado = 0";
            Statement stmtPostgre = connPostgre.createStatement();
            ResultSet rs = stmtPostgre.executeQuery(query);

            while (rs.next()) {
                String operacion = rs.getString("Operacion");
                String tabla = rs.getString("Tabla");
                int registroId = rs.getInt("RegistroId");

                if (operacion.equals("INSERT")) {
                    replicarInsertPGaSQLS(connPostgre, connSQL, tabla, registroId);
                } else if (operacion.equals("UPDATE")) {
                    replicarUpdatePGaSQLS(connPostgre, connSQL, tabla, registroId);
                } else if (operacion.equals("DELETE")) {
                    replicarDeletePGaSQLS(connSQL, tabla, registroId);
                }

                // Marca la operaci√≥n como procesada
                String update = "UPDATE Bitacora SET Procesado = 1 WHERE Operacion = ? AND Tabla = ? AND RegistroId = ?";
                PreparedStatement pstmt = connPostgre.prepareStatement(update);
                pstmt.setString(1, operacion);
                pstmt.setString(2, tabla);
                pstmt.setInt(3, registroId);
                pstmt.executeUpdate();
            }

        } catch (SQLException e) {
            e.printStackTrace();
        }
    }

    private void replicarInsertPGaSQLS(Connection connPostgre, Connection connSQL, String tabla, int registroId) throws SQLException {
        // Recupera el registro completo de PostgreSQL
        String queryPostgre = "SELECT * FROM " + tabla + " WHERE Id = ?";
        PreparedStatement pstmtPostgre = connPostgre.prepareStatement(queryPostgre);
        pstmtPostgre.setInt(1, registroId);
        ResultSet rs = pstmtPostgre.executeQuery();

        if (rs.next()) {
            // Crea una inserci√≥n en SQL Server con los datos recuperados
            StringBuilder fields = new StringBuilder();
            StringBuilder values = new StringBuilder();
            for (int i = 1; i <= rs.getMetaData().getColumnCount(); i++) {
                if (i > 1) {
                    fields.append(", ");
                    values.append(", ");
                }
                fields.append(rs.getMetaData().getColumnName(i));
                values.append("?");
            }

            String insertSQL = "INSERT INTO " + tabla + " (" + fields.toString() + ") VALUES (" + values.toString() + ")";
            PreparedStatement pstmtSQL = connSQL.prepareStatement(insertSQL);

            for (int i = 1; i <= rs.getMetaData().getColumnCount(); i++) {
                pstmtSQL.setObject(i, rs.getObject(i));
            }
            pstmtSQL.executeUpdate();
        }
    }

    private void replicarUpdatePGaSQLS(Connection connPostgre, Connection connSQL, String tabla, int registroId) throws SQLException {
        // Recupera el registro completo de PostgreSQL
        String queryPostgre = "SELECT * FROM " + tabla + " WHERE Id = ?";
        PreparedStatement pstmtPostgre = connPostgre.prepareStatement(queryPostgre);
        pstmtPostgre.setInt(1, registroId);
        ResultSet rs = pstmtPostgre.executeQuery();

        if (rs.next()) {
            // Crea una actualizaci√≥n en SQL Server con los datos recuperados
            StringBuilder setClause = new StringBuilder();
            for (int i = 1; i <= rs.getMetaData().getColumnCount(); i++) {
                if (i > 1) {
                    setClause.append(", ");
                }
                setClause.append(rs.getMetaData().getColumnName(i)).append(" = ?");
            }

            String updateSQL = "UPDATE " + tabla + " SET " + setClause.toString() + " WHERE Id = ?";
            PreparedStatement pstmtSQL = connSQL.prepareStatement(updateSQL);

            for (int i = 1; i <= rs.getMetaData().getColumnCount(); i++) {
                pstmtSQL.setObject(i, rs.getObject(i));
            }
            pstmtSQL.setInt(rs.getMetaData().getColumnCount() + 1, registroId);
            pstmtSQL.executeUpdate();
        }
    }

    private void replicarDeletePGaSQLS(Connection connSQL, String tabla, int registroId) throws SQLException {
        // Elimina el registro en SQL Server
        String deleteSQL = "DELETE FROM " + tabla + " WHERE Id = ?";
        PreparedStatement pstmtSQL = connSQL.prepareStatement(deleteSQL);
        pstmtSQL.setInt(1, registroId);
        pstmtSQL.executeUpdate();
    }


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JComboBox<String> CB_NombreInstancia;
    private javax.swing.JComboBox<String> CB_NombreInstancia1;
    private javax.swing.JButton JB_Guardar;
    private javax.swing.JButton JB_Probar;
    private javax.swing.JButton JB_Probar1;
    private javax.swing.JTextField JT_NombreBD;
    private javax.swing.JTextField JT_NombreBD1;
    private javax.swing.JTextField JT_NombreUser;
    private javax.swing.JTextField JT_NombreUser1;
    private javax.swing.JTextField JT_Password;
    private javax.swing.JTextField JT_Password1;
    private javax.swing.JTextField JT_Puerto;
    private javax.swing.JTextField JT_Puerto1;
    private javax.swing.JButton btnAgregar;
    private javax.swing.JButton btnCancelar;
    private javax.swing.JButton btnGuardar;
    private javax.swing.JButton btnRemover;
    private javax.swing.JFrame jFrame1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel16;
    private javax.swing.JLabel jLabel17;
    private javax.swing.JLabel jLabel18;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JList<String> jListReplicando;
    private javax.swing.JList<String> jListSinReplicar;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    // End of variables declaration//GEN-END:variables
boolean sqlServer = true;
    String lastDate = "";

    private void cargarTablasOrigen() {
        DefaultListModel<String> model = new DefaultListModel<>();
        DefaultListModel<String> model1 = new DefaultListModel<>();
        if (CB_NombreInstancia.getSelectedIndex() == 0) {
            try (Connection conn = DatabaseConnection.getSQLServerConnection(instanceSQlOrigen, databaseOrigen, portOrigen, userOrigen, passOrigen)) {
                DatabaseMetaData metaData = conn.getMetaData();
                ResultSet tables = metaData.getTables(null, null, "%", new String[]{"TABLE"});

                while (tables.next()) {
                    String tableName = tables.getString("TABLE_NAME");
                    if (!tableName.equalsIgnoreCase("bitacor")
                            && !tableName.equalsIgnoreCase("trace_xe_action_map")
                            && !tableName.equalsIgnoreCase("trace_xe_event_map")) {
                        model.addElement(tableName);
                    }

                }

                jListSinReplicar.setModel(model);
                jListReplicando.setModel(model1);
            } catch (SQLException ex) {
                JOptionPane.showMessageDialog(null, "Error al cargar las tablas: " + ex.getMessage());
            }
//            try (Connection conn = DatabaseConnection.connectToPostgreSQL(instanceSQlDestino, databaseDestino, portDestino, userDestino, passDestino)) {
//                DatabaseMetaData metaData = conn.getMetaData();
//                ResultSet tables = metaData.getTables(null, null, "%", new String[]{"TABLE"});
//
//                while (tables.next()) {
//                    String tableName = tables.getString("TABLE_NAME");
//                    model1.addElement(tableName);
//                }
//
//                jListReplicando.setModel(model1);
//            } catch (SQLException ex) {
//                JOptionPane.showMessageDialog(null, "Error al cargar las tablas: " + ex.getMessage());
//            }
        } else {
            try (Connection conn = DatabaseConnection.connectToPostgreSQL(instanceSQlOrigen, databaseOrigen, portOrigen, userOrigen, passOrigen)) {
                DatabaseMetaData metaData = conn.getMetaData();
                ResultSet tables = metaData.getTables(null, null, "%", new String[]{"TABLE"});

                while (tables.next()) {
                    String tableName = tables.getString("TABLE_NAME");
                    model.addElement(tableName);
                }

                jListSinReplicar.setModel(model);
                jListReplicando.setModel(model1);
            } catch (SQLException ex) {
                JOptionPane.showMessageDialog(null, "Error al cargar las tablas: " + ex.getMessage());
            }
//            try (Connection conn = DatabaseConnection.getSQLServerConnection(instanceSQlDestino, databaseDestino, portDestino, userDestino, passDestino)) {
//                DatabaseMetaData metaData = conn.getMetaData();
//                ResultSet tables = metaData.getTables(null, null, "%", new String[]{"TABLE"});
//
//                while (tables.next()) {
//                    String tableName = tables.getString("TABLE_NAME");
//                    model1.addElement(tableName);
//                }
//
//                jListReplicando.setModel(model1);
//            } catch (SQLException ex) {
//                JOptionPane.showMessageDialog(null, "Error al cargar las tablas: " + ex.getMessage());
//            }
        }
    }

    private static boolean tableExistsSQLaPG(Connection connPostgre, String tableName) throws SQLException {
        // Consulta para verificar la existencia de la tabla en PostgreSQL
        String query = "SELECT EXISTS (SELECT 1 FROM information_schema.tables WHERE table_name = '" + tableName + "')";
        try (Statement stmt = connPostgre.createStatement()) {
            // Ejecutar la consulta
            return stmt.executeQuery(query).next();
        }
    }
    
    private static void dropTableSQLaPG(Connection connPostgre, String tableName) throws SQLException {
        // Consulta para eliminar la tabla en PostgreSQL
        String query = "DROP TABLE " + tableName;
        try (Statement stmt = connPostgre.createStatement()) {
            // Ejecutar la consulta de eliminaci√≥n
            stmt.executeUpdate(query);
        }
    }
    
     private static boolean tableExistsPGaSQL(Connection connSQL, String tableName) throws SQLException {
        // Consulta para verificar la existencia de la tabla en SQL Server
        String query = "IF EXISTS (SELECT 1 FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_NAME = '" + tableName + "') SELECT 1 ELSE SELECT 0";
        try (Statement stmt = connSQL.createStatement()) {
            // Ejecutar la consulta
            return stmt.executeQuery(query).next();
        }
    }

    private static void dropTablePGaSQL(Connection connSQL, String tableName) throws SQLException {
        // Consulta para eliminar la tabla en SQL Server
        String query = "DROP TABLE " + tableName;
        try (Statement stmt = connSQL.createStatement()) {
            // Ejecutar la consulta de eliminaci√≥n
            stmt.executeUpdate(query);
        }
    }
    
    private void replicarTablaEstructura(Connection connSQL, Connection connPostgre, String tabla) throws SQLException {
        // Obtener la estructura de la tabla desde SQL Server
        DatabaseMetaData metaData = connSQL.getMetaData();
        ResultSet columns = metaData.getColumns(null, null, tabla, null);
        ResultSet primaryKeys = metaData.getPrimaryKeys(null, null, tabla);
        ResultSet foreignKeys = metaData.getImportedKeys(null, null, tabla);

        StringBuilder createTableSQL = new StringBuilder("CREATE TABLE " + tabla + " (");
        StringBuilder primaryKeySQL = new StringBuilder();
        List<String> foreignKeySQL = new ArrayList<>();

        while (columns.next()) {
            String columnName = columns.getString("COLUMN_NAME");
            String columnType = columns.getString("TYPE_NAME");
            int columnSize = columns.getInt("COLUMN_SIZE");

            if (createTableSQL.length() > ("CREATE TABLE " + tabla + " (").length()) {
                createTableSQL.append(", ");
            }

            // Ajustar los tipos de datos seg√∫n sea necesario entre SQL Server y PostgreSQL
            String postgreColumnType = mapSQLServerToPostgreSQLType(columnType, columnSize);
            createTableSQL.append(columnName).append(" ").append(postgreColumnType);
        }

        while (primaryKeys.next()) {
            String pkName = primaryKeys.getString("COLUMN_NAME");

            if (primaryKeySQL.length() > 0) {
                primaryKeySQL.append(", ");
            }
            primaryKeySQL.append(pkName);
        }

        if (primaryKeySQL.length() > 0) {
            createTableSQL.append(", PRIMARY KEY (").append(primaryKeySQL.toString()).append(")");
        }

        while (foreignKeys.next()) {
            String fkName = foreignKeys.getString("FKCOLUMN_NAME");
            String pkTableName = foreignKeys.getString("PKTABLE_NAME");
            String pkColumnName = foreignKeys.getString("PKCOLUMN_NAME");

            foreignKeySQL.add("FOREIGN KEY (" + fkName + ") REFERENCES " + pkTableName + " (" + pkColumnName + ")");
        }

        for (String fkSQL : foreignKeySQL) {
            createTableSQL.append(", ").append(fkSQL);
        }

        createTableSQL.append(")");

        // Ejecutar la declaraci√≥n de creaci√≥n de tabla en PostgreSQL
        try (Statement stmtPostgre = connPostgre.createStatement()) {
            stmtPostgre.executeUpdate(createTableSQL.toString());
        }
    }

    private String mapSQLServerToPostgreSQLType(String sqlServerType, int size) {
        switch (sqlServerType) {
            case "varchar":
            case "nvarchar":
            case "char":
            case "nchar":
                return "VARCHAR(" + size + ")";
            case "int":
                return "INTEGER";
            case "bigint":
                return "BIGINT";
            case "float":
                return "FLOAT";
            case "bit":
                return "BOOLEAN";
            case "datetime":
            case "smalldatetime":
                return "TIMESTAMP";
            // A√±adir m√°s mapeos seg√∫n sea necesario
            default:
                return sqlServerType; // Por defecto, devolver el tipo original (puede necesitar ajuste)
        }
    }

    private void replicarTablaInicial(Connection connSQL, Connection connPostgre, String tabla) throws SQLException {
        // Recupera todos los registros de SQL Server
        String querySQL = "SELECT * FROM " + tabla;
        Statement stmtSQL = connSQL.createStatement();
        ResultSet rs = stmtSQL.executeQuery(querySQL);

        while (rs.next()) {
            StringBuilder fields = new StringBuilder();
            StringBuilder values = new StringBuilder();
            for (int i = 1; i <= rs.getMetaData().getColumnCount(); i++) {
                if (i > 1) {
                    fields.append(", ");
                    values.append(", ");
                }
                fields.append(rs.getMetaData().getColumnName(i));
                values.append("?");
            }

            String insertPostgre = "INSERT INTO " + tabla + " (" + fields.toString() + ") VALUES (" + values.toString() + ")";
            PreparedStatement pstmtPostgre = connPostgre.prepareStatement(insertPostgre);

            for (int i = 1; i <= rs.getMetaData().getColumnCount(); i++) {
                pstmtPostgre.setObject(i, rs.getObject(i));
            }
            pstmtPostgre.executeUpdate();
        }
    }

    public void replicarTablaEstructuraPGaSQLS(Connection connPostgre, Connection connSQL, String tabla) throws SQLException {
        // Obtener la estructura de la tabla desde PostgreSQL usando pg_catalog
        String queryColumns = "SELECT column_name, data_type, character_maximum_length, numeric_precision, numeric_scale "
                + "FROM information_schema.columns "
                + "WHERE table_name = ?";

        PreparedStatement stmtColumns = connPostgre.prepareStatement(queryColumns);
        stmtColumns.setString(1, tabla);
        ResultSet columns = stmtColumns.executeQuery();

        StringBuilder createTableSQL = new StringBuilder("CREATE TABLE " + tabla + " (");
        StringBuilder primaryKeySQL = new StringBuilder();
        List<String> foreignKeySQL = new ArrayList<>();

        while (columns.next()) {
            String columnName = columns.getString("column_name");
            String columnType = columns.getString("data_type");
            int columnSize = columns.getInt("character_maximum_length");
            int numericPrecision = columns.getInt("numeric_precision");
            int numericScale = columns.getInt("numeric_scale");

            if (createTableSQL.length() > ("CREATE TABLE " + tabla + " (").length()) {
                createTableSQL.append(", ");
            }

            // Ajustar los tipos de datos seg√∫n sea necesario entre PostgreSQL y SQL Server
            String sqlServerColumnType = mapPostgreSQLToSQLServerType(columnType, columnSize, numericPrecision, numericScale);
            System.out.println("|||||||||||||||"+sqlServerColumnType);
            createTableSQL.append(columnName).append(" ").append(sqlServerColumnType);
        }

        // Obtener claves primarias
        ResultSet primaryKeys = connPostgre.getMetaData().getPrimaryKeys(null, null, tabla);
        while (primaryKeys.next()) {
            String pkName = primaryKeys.getString("COLUMN_NAME");

            if (primaryKeySQL.length() > 0) {
                primaryKeySQL.append(", ");
            }
            primaryKeySQL.append(pkName);
        }

        if (primaryKeySQL.length() > 0) {
            createTableSQL.append(", PRIMARY KEY (").append(primaryKeySQL.toString()).append(")");
        }

        // Obtener claves for√°neas
        ResultSet foreignKeys = connPostgre.getMetaData().getImportedKeys(null, null, tabla);
        while (foreignKeys.next()) {
            String fkName = foreignKeys.getString("FKCOLUMN_NAME");
            String pkTableName = foreignKeys.getString("PKTABLE_NAME");
            String pkColumnName = foreignKeys.getString("PKCOLUMN_NAME");

            foreignKeySQL.add("FOREIGN KEY (" + fkName + ") REFERENCES " + pkTableName + " (" + pkColumnName + ")");
        }

        for (String fkSQL : foreignKeySQL) {
            createTableSQL.append(", ").append(fkSQL);
        }

        createTableSQL.append(")");

        // Ejecutar la declaraci√≥n de creaci√≥n de tabla en SQL Server
        try (Statement stmtSQL = connSQL.createStatement()) {
            System.out.println("Executing SQL: " + createTableSQL.toString());
            stmtSQL.executeUpdate(createTableSQL.toString());
        }
    }

    private String mapPostgreSQLToSQLServerType(String postgreSQLType, int size, int precision, int scale) {
        switch (postgreSQLType.toLowerCase()) {
            case "character varying":
                return size > 0 ? "varchar(" + size + ")" : "varchar(MAX)";
            case "varchar":
                return size > 0 ? "NVARCHAR(" + size + ")" : "NVARCHAR(MAX)";
            case "char":
            case "character":
                return "CHAR(" + size + ")";
            case "text":
                return "TEXT";
            case "integer":
            case "int4":
                return "INT";
            case "bigint":
            case "int8":
                return "BIGINT";
            case "real":
            case "float4":
                return "REAL";
            case "double precision":
            case "float8":
                return "FLOAT";
            case "boolean":
            case "bool":
                return "BIT";
            case "date":
                return "DATE";
            case "timestamp":
            case "timestamp without time zone":
            case "timestamp with time zone":
                return "DATETIME";
            case "numeric":
            case "decimal":
                return "DECIMAL(" + precision + ", " + scale + ")";
            // A√±adir m√°s mapeos seg√∫n sea necesario
            default:
                return postgreSQLType; // Por defecto, devolver el tipo original (puede necesitar ajuste)
        }
    }

    public void replicarTablaInicialPGaSQLS(Connection connPostgre, Connection connSQL, String tabla) throws SQLException {
        // Recupera todos los registros de PostgreSQL
        String queryPostgre = "SELECT * FROM " + tabla;
        Statement stmtPostgre = connPostgre.createStatement();
        ResultSet rs = stmtPostgre.executeQuery(queryPostgre);

        while (rs.next()) {
            StringBuilder fields = new StringBuilder();
            StringBuilder values = new StringBuilder();
            for (int i = 1; i <= rs.getMetaData().getColumnCount(); i++) {
                if (i > 1) {
                    fields.append(", ");
                    values.append(", ");
                }
                fields.append(rs.getMetaData().getColumnName(i));
                values.append("?");
            }

            String insertSQL = "INSERT INTO " + tabla + " (" + fields.toString() + ") VALUES (" + values.toString() + ")";
            PreparedStatement pstmtSQL = connSQL.prepareStatement(insertSQL);

            for (int i = 1; i <= rs.getMetaData().getColumnCount(); i++) {
                pstmtSQL.setObject(i, rs.getObject(i));
            }
            pstmtSQL.executeUpdate();
        }
    }
}
